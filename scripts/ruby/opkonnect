#!/usr/bin/env ruby
# frozen_string_literal: false

require "#{File.expand_path(__dir__)}/includes/op_base.rb"

class OpKonnect < OpBase
  attr_accessor :server, :command, :option_parser, :debug

  def initialize
    load_op_severs_config
  end

  def go
    parse_opts
    port = @ssh_config[:port] || 22

    if @command.nil?
      run_ssh_connect(@ssh_config[:user], @ssh_config[:hostname], @ssh_config[:key], port)
    else
      run_ssh_command(@ssh_config[:user], @ssh_config[:hostname], @ssh_config[:key], @command, port)
    end
  end

  HELP = <<-BAN.freeze
  A ssh connect script for old platform websites
  Ex:
    opkonnect -s stepbet-dev
  BAN

  def parse_opts
    self.option_parser = OptionParser.new do |opts|
      opts.banner = HELP

      opts.separator ''
      opts.separator 'Specific options:'

      add_debug_option(opts)

      opts.on('-s', '--server=S', 'Required, the server to connect') do |x|
        self.server = x
      end

      opts.on('-c', '--command=C', 'Optional, command to run') do |x|
        self.command = x
      end

      add_help_option(opts)
    end
    option_parser.parse!(ARGV)

    exit_with_error('server parameter is required') if server.nil?

    @ssh_config = ssh_config(server)
    exit_with_error('Server not found') if @ssh_config.nil?
  end

  def exec_command(cmd)
    puts "Running command: '#{cmd}'" if debug
    cmd.gsub("'", "\\\\'")
    # %x[ #{cmd} ]
    exec(cmd)
  end

  def run_ssh_connect(user, host, key, port = 22)
    puts "Connecting to #{user}@#{host}".green
    exec_command("ssh -i #{key} #{user}@#{host} -p #{port}")
  end
end

OpKonnect.new.go
