#!/usr/bin/env ruby
# frozen_string_literal: false

require File.expand_path(__dir__) + '/includes/op_base.rb'

# CLI script which will start tmux
class Wbtmux < OpBase
  attr_accessor :option_parser, :apps_to_run, :apps_to_open,
                :opt_exit_tmux, :opts_fix_dns, :opts_wait_convox

  DEFAULT_SERVICES = %w[mysql user].freeze
  SERVICE_MAP = {
    'mysql' => 'mysql',
    'user' => 'wb-user-service',
    'auth' => 'wb-auth-service',
    'bill' => 'wb-billing-service',
    'graphql' => 'wb-graphql-service',
    'dietbet' => 'dietbet-game-service',
    'hub' => 'wb-hub',
    'admin-auth' => 'wb-admin-auth-service',
    'admin-web' => 'wb-admin-web',
    'metric' => 'wb-metric-service',
    'notify' => 'wb-notify-service',
    'member' => 'wb-membership-service',
    'falkor' => 'falkor-game-service',
    'runbet' => 'runbet-game-service',
    'quitbet' => 'quitbet-game-service',
    'social' => 'wb-social-service'
  }.freeze
  ALL_SERVICES = SERVICE_MAP.keys
  def initialize
    @path = "#{Dir.home}/Work/wb-services"
    @bin_path = "#{Dir.home}/Work/docs/scripts/ruby"
    @apps_to_open = []
    @apps_to_run = []
  end

  def go
    parse_opts

    run_tmux_session
  end

  def app_full_name(name)
    SERVICE_MAP[name]
  end

  def run_tmux_session
    fix_dns_and_aws if opts_fix_dns

    if convox_required? && !kubernetes_ready?
      puts 'Kubernetes (microk8s) not running. Starting it'
      start_kubernetes
    end

    wait_for_convox if opts_wait_convox
    if convox_required?
      exit_with_error('Convox not ready. Aborting.') unless convox_ready?
    end

    session_name = 'lconvox'

    all_apps = apps_to_run + apps_to_open.uniq

    if all_apps.count.positive?
      prepare_session(session_name)

      open_apps(session_name, all_apps)
      run_apps(session_name, apps_to_run)

      enter_tmux_session(session_name) unless opt_exit_tmux
    end

    exit_tmux_session(session_name) if opt_exit_tmux
  end

  def prepare_session(session_name)
    if session_exists?(session_name)
      exit_tmux_session(session_name)
    else
      queue = CommandQueue.new(session_name)
      queue.create_session('info', @path)
      queue.run
    end
  end

  def open_apps(session_name, apps)
    return if apps.nil?

    active_windows = list_windows(session_name)

    queue = CommandQueue.new(session_name)
    queue.attach_session

    apps.each do |app|
      next if active_windows.include?(app)

      convox_app = app_full_name(app)
      np_service = np_service_config(convox_app, true)
      queue.new_window(app, np_service.path)
    end

    queue.run
  end

  def run_apps(session_name, apps)
    return if apps.nil?

    # reload window list
    active_windows = list_windows(session_name)

    apps.each do |app|
      next unless active_windows.include?(app)

      convox_app = app_full_name(app)
      np_service = np_service_config(convox_app, true)

      np_service.prepare_service
      app_command = np_service.start_command

      queue = CommandQueue.new(session_name)
      queue.attach_session
      queue.exec_command_inside_screen(app, 1, app_command)

      queue.swap_panes(0, 1)
      queue.run
    end
  end

  def exit_tmux_session(session_name)
    exec_command("tmux send-keys -t \"0\" C-z 'tmux detach-client -s #{session_name}' Enter")
  end

  def enter_tmux_session(session_name)
    exec_command("tmux attach-session -t #{session_name}")
  end

  def parse_opts
    self.option_parser = OptionParser.new do |opts|
      opts.banner = HELP

      opts.separator ''
      opts.separator 'Specific options:'

      opts.on('-z', '--debug', 'Optional: load pry') do |_x|
        require 'pry'
      end

      opts.on('-r', '--run=S', 'Optional, the apps to run') do |x|
        self.apps_to_run = x.split(',').collect(&:strip)
      end

      opts.on('-o', '--open=O', 'Optional, the apps to open') do |x|
        self.apps_to_open = x.split(',').collect(&:strip)
      end

      opts.on('-x', '--exit', 'Optional, exit current tmux session without killing it') do |_x|
        self.opt_exit_tmux = true
      end

      opts.on('-f', '--fixdns', 'Optional, Fix convox dns') do |_x|
        self.opts_fix_dns = true
      end

      opts.on('-w', '--wait', 'Optional, wait for convox') do |_x|
        self.opts_wait_convox = true
      end

      opts.on('-h', '--help', 'Prints this help') do
        puts opts
        exit
      end
    end
    option_parser.parse!(ARGV)

    validate_service_names(apps_to_run)
    validate_service_names(apps_to_open)
  end

  def validate_service_names(services)
    return if services.nil?

    services.each do |s|
      exit_with_error "Service '#{s} 'not found" unless ALL_SERVICES.include?(s)
    end
  end

  def exit_with_error(msg)
    puts msg
    puts 'See help:'
    show_help
    exit(1)
  end

  def list_windows(session_name)
    res = exec_command("tmux list-windows -t '#{session_name}' " + '-F \'#{window_name}\'')
    res.split("\n")
  end

  def session_exists?(name)
    system("tmux has-session -t #{name} 2>/dev/null") == true
  end

  def exec_command(cmd)
    puts 'Running Command:'
    puts cmd.blue
    cmd.gsub("'", "\\\\'")
    `#{cmd}`
  end

  def convox_required?
    @_convox_required ||= begin
      res = apps_to_run.find do |s|
        next if s == 'mysql'

        name = app_full_name(s)
        next unless name

        np_service_is_on_local_convox?(name)
      end
      !res.nil?
    end
  end

  def wait_for_convox
    12.times do
      break if convox_ready?

      puts 'Convox not ready. Waiting 10 seconds'
      exec_command('sleep 10')
    end
  end

  def fix_dns_and_aws
    puts 'Fixing iptables'
    exec_command('sudo iptables -P FORWARD ACCEPT')

    puts 'Fixing aws'
    pass = exec_command('aws ecr get-login-password --region us-west-2 --profile prod')
    exec_command("convox registries add 247028141071.dkr.ecr.us-west-2.amazonaws.com AWS #{pass}")
  end

  HELP = <<~HELP.freeze
    wbtmux
      Wrapper script for tmux. Can run any of the following services #{SERVICE_MAP.keys.join(',')}
      Ex:

        or
        wbtmux -r mysql,user -o auth,falkor
  HELP

  def show_help
    puts HELP
  end

  class CommandQueue
    attr_accessor :commands, :session_name
    def initialize(session_name)
      @commands = []
      @session_name = session_name
    end

    def create_session(screen_name, path)
      _add "new-session -c '#{path}' -n \"#{screen_name}\" -s '#{session_name}'"
    end

    def attach_session
      _add "attach-session -t #{session_name}"
    end

    def new_window(name, path)
      _add "new-window -c #{path} -n \"#{name}\" /bin/bash -i"
      _add "split-window -v -c #{path} /bin/bash -i"
    end

    def exec_command_inside_screen(screen, pane, command)
      _add "select-window -t #{screen}"
      _add "send-keys -t #{pane} C-z '#{command.gsub("'", "\\\\'")}' Enter"
    end

    def swap_panes(src, dst)
      _add "swap-pane -s #{src} -t #{dst}"
    end

    def exit_session
      _add "select-window -t 'info'"
      _add "send-keys -t \"0\" C-z 'tmux detach-client -s #{session_name}' Enter"
    end

    def run
      exit_session
      exec_command('tmux ' + commands.join(" \\; \\\n    ") + '\\;')
    end

    def exec_command(cmd)
      puts 'Running Command:'
      puts cmd.blue
      cmd.gsub("'", "\\\\'")
      `#{cmd}`
    end

    private

    def _add(cmd)
      commands.push(cmd)
    end

    # Time.now.strftime('%Y-%m-%d %H:%M:%S')
  end
end

Wbtmux.new.go
