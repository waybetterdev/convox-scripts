#!/usr/bin/env ruby
# frozen_string_literal: false

require File.expand_path(__dir__) + '/includes/op_base.rb'

class OpDeploy < OpBase
  attr_accessor :opts_op_app, :option_parser, :commit, :debug, :make_backup

  TEMP_PATH = '~/Work/deploy/_files'.freeze
  # we are in `docs/scripts/ruby/`
  YUI_PATH = File.expand_path('../..', __dir__) + '/libraries/yuicompressor-2.4.7.jar'

  def initialize
    load_op_severs_config
  end

  def go
    parse_opts

    deploy_changes_since_commit(opts_op_app, commit)
  end

  def export_since_commit_from_git(commit_hash, source_path, export_path)
    # git -C /var/www/stepbet diff --name-only --diff-filter=ACdMRTub --diff-algorithm=myers --relative 16961e04f886e5da42350771acf4333560b14d20
    git = "git -C #{source_path}"
    cmd = "#{git} diff --name-only --diff-filter=ACdMRTub --diff-algorithm=myers --relative #{commit_hash}"
    zip_path = "#{source_path}/archive.zip"
    files = exec_command(cmd)

    puts "You are about to deploy to #{opts_op_app.red}"
    puts 'Files modified:'
    puts files.green
    puts 'Continue? y/n'
    exit unless STDIN.getc == 'y'

    exec_command("rm -f #{zip_path}")
    exec_command("#{git} archive -o #{zip_path} HEAD " + files.gsub(/\n/, ' '))

    prepare_export_path(export_path)
    unzip(zip_path, export_path)
    exec_command("rm -f #{zip_path}")
  end

  def export_all_from_git(source_path, export_path)
    puts "You are about to deploy to #{opts_op_app.red}"
    puts 'Files modified: All'
    puts 'Continue? y/n'
    exit unless STDIN.getc == 'y'

    zip_path = "#{source_path}/archive.zip"
    exec_command("rm -f #{zip_path}")
    exec_command("git -C #{source_path} archive -o #{zip_path} HEAD")

    prepare_export_path(export_path)
    unzip(zip_path, export_path)
    exec_command("rm -f #{zip_path}")
  end

  def prepare_export_path(export_path)
    exec_command("rm -rf #{export_path} && mkdir #{export_path}")
  end

  def unzip(zipfile, dir)
    cmd = "unzip #{zipfile} -d #{dir}"
    exec_command(cmd)
  end

  def zip(dir, zipfile)
    cwd = exec_command('pwd')
    exec_command("cd #{dir} && rm -f #{zipfile}")
    exec_command("cd #{dir} && zip -r #{zipfile} *")
    exec_command("cd #{cwd}")
  end

  def remove_unwanted_files(export_path)
    # cleanup important files
    deleted_files = [
      'system/data/settings.php',
      'less',
      'features',
      'grunt',
      'jsdev',
      'tests'
    ]
    deleted_files.each do |file|
      exec_command("rm -rfv #{export_path}/#{file}")
    end

    # remove all .htaccess
    exec_command("find #{export_path} -name '.htaccess' -delete")
  end

  def compress_css(export_path)
    paths = [
      'css',
      'admin/css',
      'mobile/css',
      # 'files/emails/templates', # don't compress email styles (yui generated 3 digit HEX colors that are not supported by all email clients)
      'js',
      'mobile/js'
    ]

    paths.each do |subfolder|
      result = exec_command("test -e #{export_path}/#{subfolder} && find #{export_path}/#{subfolder} -name '*.css'")
      next unless result.match(/\.css/)

      result.split("\n").each do |file|
        print exec_command("java -jar #{YUI_PATH} #{file} --type css -o #{file} --charset utf-8")
      end
    end
  end

  def compress_js(export_path)
    paths = [
      'js',
      'admin/js'
    ]

    paths.each do |subfolder|
      result = exec_command("test -e #{export_path}/#{subfolder} && find #{export_path}/#{subfolder} -name '*.js'")
      next unless result.match(/\.js/)

      result.split("\n").each do |file|
        print exec_command("java -jar #{YUI_PATH} #{file} --type js -o #{file} --charset utf-8")
      end
    end
  end

  def deploy_changes_since_commit(site_name, commit)
    config = op_deploy_config(site_name)

    temp_path = "#{TEMP_PATH}/#{site_name}"

    zip_name = (config[:zip_name] || + "#{site_name}.zip")
    zip_path = "#{temp_path}/#{zip_name}"
    src_path = config[:src]

    if commit
      export_since_commit_from_git(commit, src_path, temp_path)
    else
      export_all_from_git(src_path, temp_path)
    end

    remove_unwanted_files(temp_path)
    compress_css(temp_path)
    compress_js(temp_path)
    zip(temp_path, zip_path)

    user = config[:user]
    hostnames = config[:hostnames]
    hostnames = [hostnames] unless hostnames.is_a?(Array)

    key = config[:key]
    dst_path = config[:dst]

    upload_path = config[:deploy_path] || config[:dst]
    hostnames.each do |hostname|
      upload_file_via_scp(user, hostname, key, zip_path, upload_path)

      if make_backup && config[:deploy_path]
        run_ssh_command(user, hostname, key, "#{config[:deploy_path]}/run_deploy.sh")
      else
        run_ssh_command(user, hostname, key, "unzip -o #{upload_path}/#{zip_name} -d #{dst_path}")
        run_ssh_command(user, hostname, key, "rm -f #{upload_path}/#{zip_name}")
      end
    end
  end

  def upload_file_via_scp(user, host, key, src_path, dst_path)
    response = exec_command("scp -v -i #{key} #{src_path} #{user}@#{host}:#{dst_path}")
    print response.green
  end

  HELP = <<-BAN.freeze

  A deploy script for old platform websites
  Ex:
    opdeploy -a stepbet-dev
  BAN

  def parse_opts
    self.option_parser = OptionParser.new do |opts|
      opts.banner = HELP

      opts.separator ''
      opts.separator 'Specific options:'

      add_debug_option(opts)

      add_op_app_option(opts)

      opts.on('-c', '--commit=C', 'Required, last commit released before') do |x|
        self.commit = x
      end

      opts.on('-b', '--backup', 'Optional, deploy with backup') do |_x|
        self.make_backup = true
      end

      add_help_option(opts)
    end
    option_parser.parse!(ARGV)

    exit_with_error('app parameter is required') if opts_op_app.nil?

    @op_deploy_config = op_deploy_config(opts_op_app)
    @op_deploy_config = op_deploy_config(opts_op_app)
    exit_with_error('app not found') if @op_deploy_config.nil?
  end
end

OpDeploy.new.go
