#!/usr/bin/env ruby

public

require 'optparse'
require 'open3'

begin
  require 'highline'
  require 'colored'
  require 'terminfo'
rescue LoadError => x
  puts <<-XXX
To run this utility:
  gem install 'highline'
  gem install 'colored'
  gem install 'ruby-terminfo'
XXX
  exit(1)
end

require File.expand_path('../', __FILE__) + "/includes/op-base.rb"

class NpServiceConfig < OpBase

  attr_accessor :opts_write, :opts_print

  def initialize
    
  end

  def go
    parse_opts

    prepare_local_convox_services
    prepare_local_kraken_services

    if self.opts_write
      puts "Rebuilding apache proxy config"
      exec_ic_command "~/Work/docs/scripts/installs/apache-conf/build-apache-conf-and-install.sh"
    end
  end

  HELP = <<-BAN
  Script that creates, installs or deletes local convox/node apps based on np-services.config.rb
  Ex:
    np-service-config -w
  BAN

  def parse_opts
    self.option_parser = OptionParser.new do |opts|

      opts.banner = HELP

      opts.separator ""
      opts.separator "Specific options:"

      self.add_debug_option(opts)
      self.add_print_option(opts, "Print config to screen")
      self.add_write_option(opts, "Apply config")
      self.add_delete_option(opts, "Delete unnecessary convox apps")

      add_help_option(opts)
    end
    self.option_parser.parse!(ARGV)
  end

  def prepare_local_convox_services
    old_apps = list_convox_apps
    new_apps = local_convox_np_services

    puts "Local convox apps: #{new_apps.inspect.green}"
    apps_to_delete = old_apps - new_apps
    if self.opts_print
      puts "Old convox apps that need to be deleted: #{apps_to_delete.inspect.green}"
    elsif self.opts_write && self.opts_delete && apps_to_delete
      apps_to_delete.each do |s| 
        puts "Deleting convox app '#{s.green}'. This may take a while to complete."
        delete_convox_app(s)
      end
    end
    
    apps_to_create = new_apps - old_apps
    if self.opts_print
      puts "Convox apps that need to be created: #{apps_to_create.inspect.green}"
    elsif self.opts_write && apps_to_create
      apps_to_create.each do |s| 
        puts "Creating convox app '#{s.green}'. This may take a while to complete."
        create_convox_app(s)
      end
    end

    if self.opts_write
      unchanged_apps = new_apps - apps_to_create
      unchanged_apps.each do |app|
        puts "Rebuilding env for #{app.green}"
        exec_ic_command "env-builder -w -a #{app}"
        exec_ic_command "#{path_ruby_bin}/kmd-local refresh-env -- local #{app} no-confirm"
        exec_ic_command "#{path_ruby_bin}/kmd-local refresh-yml -- local #{app} no-confirm"
      end
    end
  end
    
  def prepare_local_kraken_services
    puts "Local kraken apps: #{local_kraken_np_services.inspect.green}"

    local_kraken_np_services.each do |app|
      if convox_app_path_exists?(app)
        next unless self.opts_write
        exec_ic_command "env-builder -w -a #{app}"
        return
      end

      if self.opts_print
        puts "Local kraken app #{app.green} needs to be installed to #{convox_app_path(app).green}."
      else
        puts "Installing local kraken app #{app.green}"
        exec_ic_command "install-node-app -a #{app}" 
      end
    end
  end

end

NpServiceConfig.new.go
