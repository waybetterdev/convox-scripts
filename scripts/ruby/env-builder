#!/usr/bin/env ruby
# frozen_string_literal: true

require File.expand_path(__dir__) + '/includes/op_base.rb'

class EnvBuilder < OpBase
  attr_accessor :opts_write, :opts_print

  def initialize; end

  def go
    parse_opts

    np_service = np_service_config(opts_np_app_name)
    np_service.prepare_service

    if opts_write
      str_env = generate_env
      write_env_to_file(str_env)
    elsif opts_print
      puts generate_env
    end
  end

  HELP = <<-BAN
  Env builder script for local NP services
  Ex:
    env-builder -w -a user
  BAN

  def parse_opts
    self.option_parser = OptionParser.new do |opts|
      opts.banner = HELP

      opts.separator ''
      opts.separator 'Specific options:'

      add_debug_option(opts)

      add_write_option(opts, 'Write the env to kraken or convox')
      add_print_option(opts, 'Print the env to kraken or convox')

      add_np_app_option(opts)

      add_help_option(opts)
    end
    option_parser.parse!(ARGV)

    exit_with_error('app parameter is required') if opts_np_app_name.nil?
  end

  def read_src_env_file
    env_values = default_empty_env_values
    app = opts_np_app_name

    if opts_np_app.on_local_convox? || opts_np_app.on_local_kraken?
      files = [opts_np_app.env_src_path]
    else
      exit_with_error "App `#{app}` location `#{np_service_location(app)}` not supported"
    end

    files.each do |env_path|
      exit_with_error "No env path found for app `#{opts_np_app.name}`" unless env_path
      exit_with_error "Env file '#{env_path}' not found" unless File.exist?(env_path)

      puts "Reading env from #{env_path.green}"
      File.foreach(env_path) do |line|
        key, value = line.gsub(/\n|\r/, '').split('=')

        next unless key
        next if value.nil? || value == ''
        next if /^(_|#)/ =~ key

        env_values[key] = value
      end
    end
    exit_with_error "No env variables found in file '#{env_path}'" unless env_values

    env_values.sort.to_h
  end

  def generate_env
    env_values = read_src_env_file
    rebuilt_file = []
    env_values.each do |key, value|
      if (proc_val = call_val_proc(key, value))
        value = proc_val
      end
      value = '_not_needed_locally_' if value == '_set_me_'

      line = "#{key}=#{value}"
      rebuilt_file.push line
    end

    rebuilt_file.join("\n")
  end

  def write_env_to_file(str_env)
    env_path = service_dst_env_path(opts_np_app_name)

    puts "Writing env file to #{env_path.green}"
    File.open(env_path, 'w') { |file| file.write(str_env) }
  end

  def np_service_internal_url(name)
    np_service = np_service_config(name, true)

    url = np_service_domain(name)
    return '' unless url

    if np_service.on_convox_office?
      "https://#{url}"
    elsif np_service.on_local_convox?
      if use_convox_rack_internal_urls
        url = np_service_convox_domain(name)
        port = np_service.port
        return "http://#{url}:#{port}" if convox_local_dev_rack? && np_service_is_on_local_convox?(opts_np_app_name) && port
      end
      "https://#{url}#{':' + port.to_s if port}"
    elsif np_service.on_local_kraken?
      port = np_service.port
      "http://#{url}#{':' + port.to_s if port}"
    elsif np_service.on_local_apache?
      "https://#{url}"
    end
  end

  def np_service_internal_domain(name)
    if np_service_is_on_local_convox?(name)
      np_service_convox_domain(name)
    else
      np_service_domain(name)
    end
  end

  def np_service_external_url(name, domain_only: false, variant: nil)
    np_service = np_service_config(name, true)

    url = get_service_external_domain(np_service.name, variant: variant)
    return url if domain_only
    return '' unless url

    "https://#{url}"
  end

  def service_dst_env_path(name)
    np_service_config(name, true).env_dst_path
  end

  def use_convox_rack_internal_urls
    np_service_is_on_local_convox?(opts_np_app_name)
  end

  private

  def default_empty_env_values
    defaults = [
      'PORT', 'VERIFY_CERTS', 'WB_INTERNAL_URL_SCHEME', 'WB_ENFORCE_HTTPS', 
      'WB_JWT_COOKIE', 'WB_ENV', 'GEMFURY_SECRET', 'GEN2'
    ]

    if opts_np_app.type_is_ruby?
      defaults.concat(
        ['USE_STANDARD_LOGGING', 'RBENV_VERSION']
      )
    end    
    if opts_np_app.type_is_node?
      defaults.concat([
        'NODE_TLS_REJECT_UNAUTHORIZED', 'NODE_ENV', 'NPM_CONFIG_REGISTRY'
      ])
    end

    defaults
      .each_with_object({}) {|v, hash| hash[v] = ''}
      .merge(Kenv.read_env_from_file("#{opts_np_app.path}/convox.yml"))
  end

  def call_val_proc(key, value)
    url_key = key.gsub(/_(HOST|PORT|SCHEME)$/, '_URL')
    if val_procs[key]
      val_procs[key].call
    elsif val_procs[url_key]
      value = val_procs[url_key].call
      if /_PORT$/ =~ key
        URI.parse(value).port
      elsif /_HOST$/ =~ key
        URI.parse(value).hostname
      elsif /_SCHEME$/ =~ key
        URI.parse(value).scheme
      end
    elsif /_DB_HOST$/ =~ key && /^192/ =~ value
      find_local_ip
    end
  end

  def val_procs
    @_val_procs ||= {
      'GEN2' => -> { 'false' },
      'REDIS_HOST' => -> { find_local_ip },
      'NODE_ENV' => -> { 'development' },
      'WB_ENV' => -> { 'local' },
      'VERIFY_CERTS' => -> { 'false' },
      'WB_ADMIN_JWT_COOKIE' => -> { 'wb-jwt-admin-office' },
      'WB_JWT_COOKIE' => -> { 'wb-jwt-office' },
      'NODE_TLS_REJECT_UNAUTHORIZED' => -> { '0' },
      'WB_INTERNAL_URL_SCHEME' => -> { 'http' },
      'WB_ENFORCE_HTTPS' => -> { 'false' },
      'PORT' => -> { opts_np_app.port },
      'RBENV_VERSION' => -> { File.read("#{opts_np_app.path}/.ruby-version") },
      'USE_STANDARD_LOGGING' => -> { '' },
      'DISABLE_SPRING' => -> { '1' },
      'RAILS_ENV' => -> { '' },

      'WB_NOTIFY_SERVICE_URL' => -> { np_service_internal_url('wb-notify-service') },
      'FALKOR_GAME_SERVICE_URL' => -> { np_service_internal_url('falkor-game-service') },
      'QUITBET_GAME_SERVICE_URL' => -> { np_service_internal_url('quitbet-game-service') },
      'RUNBET_GAME_SERVICE_URL' => -> { np_service_internal_url('runbet-game-service') },
      'WB_BILLING_SERVICE_URL' => -> { np_service_internal_url('wb-billing-service') },
      'WB_MEMBERSHIP_SERVICE_URL' => -> { np_service_internal_url('wb-membership-service') },
      # falkor needs MEMBERSHIP_SERVICE_HOST instead of WB_MEMBERSHIP_SERVICE_HOST
      'MEMBERSHIP_SERVICE_URL' => -> { np_service_internal_url('wb-membership-service') },
      'WB_METRIC_SERVICE_URL' => -> { np_service_internal_url('wb-metric-service') },
      'WB_SOCIAL_SERVICE_URL' => -> { np_service_internal_url('wb-social-service') },
      'WB_USER_SERVICE_URL' => -> { np_service_internal_url('wb-user-service') },

      'WB_AUTH_SERVICE_URL' => -> { np_service_internal_url('wb-auth-service') },
      'WB_AUTH_SERVICE_EXTERNAL_URL' => -> { np_service_external_url('wb-auth-service') },
      'WB_AUTH_SERVICE_BASE_URL' => -> { np_service_external_url('wb-auth-service') }, # https://accounts-office.waybetterdev.com
      'WB_AUTH_SERVICE_DOMAIN' => -> { np_service_external_url('wb-auth-service', domain_only: true) }, # https://accounts-office.waybetterdev.com
      'WB_AUTH_SERVICE_CORS_WHITELIST' => lambda {
        [
          'https://wb-auth-service.convox.office',
          'https://accounts-office.waybetterdev.com',
          'https://graphql-office.waybetterdev.com',
          'https://hub-office.waybetterdev.com',
          'https://www-office.waybetter.ninja'
        ].map { |u| [u, u.gsub(/office/, 'local')] }.flatten.join(',')
      },

      'WB_ADMIN_AUTH_SERVICE_EXTERNAL_URI' => -> { np_service_external_url('wb-admin-auth-service') },
      'WB_ADMIN_AUTH_SERVICE_DOMAIN' => -> { np_service_external_url('wb-admin-auth-service', domain_only: true) },
      'WB_ADMIN_AUTH_SERVICE_HOST' => -> { np_service_external_url('wb-admin-auth-service', domain_only: true) },
      'WB_ADMIN_AUTH_SERVICE_BASE_URL' => -> { np_service_external_url('wb-admin-auth-service') + '/auth' },

      'WB_ADMIN_WEB_URL' => -> { np_service_internal_url('wb-admin-web') },
      'WB_ADMIN_WEB_DOMAIN' => lambda {
        [
          np_service_internal_domain('wb-admin-web'),
          np_service_external_url('wb-admin-web', domain_only: true)
        ].join(',')
      },
      'WB_ADMIN_WEB_EXTERNAL_URL' => -> { np_service_external_url('wb-admin-web') },

      'WB_GRAPHQL_SERVICE_URL' => -> { np_service_internal_url('wb-graphql-service') },
      'WB_GRAPHQL_SERVICE_DOMAIN' => lambda {
        [
          np_service_internal_domain('wb-graphql-service'),
          np_service_external_url('wb-graphql-service', domain_only: true),
          np_service_external_url('wb-graphql-service', domain_only: true, variant: 'ninja')
        ].join(',')
      },
      'WB_GRAPHQL_SERVICE_EXTERNAL_URL' => -> { np_service_external_url('wb-graphql-service') },
      'GRAPHQL_URL' => -> { np_service_external_url('wb-graphql-service') + '/graphql' }, # https://graphql-office.waybetterdev.com/graphql

      'WB_HUB_URL' => -> { np_service_external_url('wb-hub') },
      'WB_HUB_EXTERNAL_URL' => -> { np_service_external_url('wb-hub') },
      'WB_HUB_DOMAIN' => -> { np_service_external_url('wb-hub', domain_only: true) },

      'STEPBET_GAME_SERVICE_URL' => -> { np_service_internal_url('stepbet') },
      'WB_STEPBET_ADMIN_URL' => -> { np_service_internal_url('stepbet') + '/admin' },

      'DIETBET_GAME_SERVICE_URL' => -> { np_service_internal_url('dietbet') },
      'WB_DIETBET_ADMIN_URL' => -> { np_service_internal_url('dietbet') + 'admin' },

      # TODO: this is a hack. Needs to be fixed properly
      'WB_ADMIN_GRAPHQL_SERVICE_EXTERNAL_URL' => -> { np_service_external_url('wb-graphql-service', variant: 'ninja') },

      # loads global secrets from env varibles on the host machine
      'REDSHIFT_URL' => -> { get_system_env('REDSHIFT_URL') },
      'GEMFURY_SECRET' => -> { get_system_env('GEMFURY_SECRET') },
      'NPM_CONFIG_REGISTRY' => -> { get_system_env('NPM_CONFIG_REGISTRY') }
    }
  end

  def get_system_env(name)
    val = ENV[name.to_s]
    exit_with_error "System environment variable #{name} not set" unless val
    val
  end
end

EnvBuilder.new.go
