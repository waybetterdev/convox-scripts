#!/usr/bin/env ruby

public

require 'optparse'
require 'open3'

begin
  require 'highline'
  require 'colored'
  require 'terminfo'
rescue LoadError => x
  puts <<-XXX
To run this utility:
  gem install 'highline'
  gem install 'colored'
  gem install 'ruby-terminfo'
XXX
  exit(1)
end

require File.expand_path('../', __FILE__) + "/includes/op-base.rb"

class EnvBuilder < OpBase

  attr_accessor :opts_write

  def initialize
    
  end

  def go
    parse_opts
    if self.opts_write || !File.exist?(kraken_g2_env_path)
      build_env_g2
      copy_env_g2_to_kraken
    end
  end

  HELP = <<-BAN
  A ssh connect script for old platform websites
  Ex:
    prepare-node-app -a wb-user-service
  BAN

  def parse_opts
    self.option_parser = OptionParser.new do |opts|

      opts.banner = HELP

      opts.separator ""
      opts.separator "Specific options:"

      self.add_debug_option(opts)

      opts.on("-w", "--write", "Write the env to kraken") do |x|
        self.opts_write = true
      end

      add_help_option(opts)
    end
    self.option_parser.parse!(ARGV)
  end

  def kraken_g2_env_path
    "#{path_kraken}/.env.g2"
  end

  def local_g2_env_path
    "#{path_secrets}/env.g2"
  end

  def copy_env_g2_to_kraken
    src = local_g2_env_path
    unless File.exists? src
      exit_with_error("File #{src} was not found. Cannot run `lrun` without it.")
    end
    
    exec_command "cp #{src} #{kraken_g2_env_path}", message: "Copying local env.g2 file to #{kraken_g2_env_path}"
  end

  def build_env_g2
    env_values = {}
    Dir.foreach("#{path_local_settings}/convox-env") do |filename|
      # next unless /\.env\.local$/ =~ filename
      
      # next unless /\.env\.g2$/ =~ filename

      next unless filename == 'combined.env.g2'
      # next unless filename == 'wb-graphql-service.env.g2'
      # next unless filename == '.env.template.g2'
 
      File.open("#{path_local_settings}/convox-env/#{filename}").each do |line|
        key, value = line.gsub("\n", "").split("=")

        next unless key
        next if (value.nil? || value == "")
        next if /^(___|#)/ =~ key
        next if key == 'PORT'

        env_values[key] = value 
      end
    end

    env_values = env_values.sort_by { |key| key }.to_h


    preset_values = {
      'GEN2'                  => -> { 'false' },
      'REDIS_HOST'                  => -> { get_local_ip },
      'WB_NOTIFY_SERVICE_URL'         => -> { local_service_url('wb-notify-service') },
      'DIETBET_GAME_SERVICE_URL'      => -> { local_service_url('dietbet-game-service') },
      'FALKOR_GAME_SERVICE_URL'       => -> { local_service_url('falkor-game-service') },
      'QUITBET_GAME_SERVICE_URL'      => -> { local_service_url('quitbet-game-service') },
      'RUNBET_GAME_SERVICE_URL'       => -> { local_service_url('runbet-game-service') },
      'STEPBET_GAME_SERVICE_URL'      => -> { local_service_url('stepbet-game-service') },
      'WB_BILLING_SERVICE_URL'        => -> { local_service_url('wb-billing-service') },
      'WB_MEMBERSHIP_SERVICE_URL'     => -> { local_service_url('wb-membership-service') },
      'WB_METRIC_SERVICE_URL'         => -> { local_service_url('wb-metric-service') },
      'WB_SOCIAL_SERVICE_URL'         => -> { local_service_url('wb-social-service') },
      'WB_USER_SERVICE_URL'           => -> { local_service_url('wb-user-service') },

      'WB_AUTH_SERVICE_URL'           => -> { local_service_url('wb-auth-service') },
      'WB_AUTH_SERVICE_EXTERNAL_URL'  => -> { local_service_url('wb-auth-service', true) },
      'WB_ADMIN_AUTH_SERVICE_BASE_URL'  => -> { local_service_url('wb-admin-auth-service', true)  + '/auth' }, # https://admin-auth-office.waybetter.ninja/auth

      'WB_ADMIN_WEB_URL'                => -> { local_service_url('wb-admin-web') },
      'WB_ADMIN_WEB_DOMAIN'             => -> { local_service_url('wb-admin-web', true, true) },
      'WB_ADMIN_WEB_EXTERNAL_URL'       => -> { local_service_url('wb-admin-web', true) },

      'WB_GRAPHQL_SERVICE_URL'          => -> { local_service_url('wb-graphql-service') },
      'WB_GRAPHQL_SERVICE_DOMAIN'       => -> { local_service_url('wb-graphql-service', true, true) },
      'WB_GRAPHQL_SERVICE_EXTERNAL_URL' => -> { local_service_url('wb-graphql-service', true) },

      # TODO: this is a hack. Needs to be fixed properly
      'WB_ADMIN_GRAPHQL_SERVICE_EXTERNAL_URL' => -> { local_service_url('wb-graphql-service', true).gsub(/waybetterdev\.com/, 'waybetter.ninja') },
    }

    rebuilt_file = []
    env_values.each do |key, value|
      url_key = key.gsub(/_(HOST|PORT)$/, '_URL')
      if preset_values[key]
        value = preset_values[key].call
      elsif (preset_values[url_key])
        value = preset_values[url_key].call
        if /_PORT$/ =~ key
          value = /https/ =~ value ? '443' : '80' 
        elsif /_HOST$/ =~ key
          value = value.gsub(/http(s)?\:\/\//, '')
        end
      elsif /_DB_HOST$/ =~ key && /^192/ =~ value
        value = get_local_ip
      elsif value == '_set_me_' 
        value = '_not_needed_locally_'
      end

      line = "#{key}=#{value}"
      rebuilt_file.push line
    end

    str = rebuilt_file.join("\n")

    File.open(local_g2_env_path, 'w') { |file| file.write(str) }
  end

  def local_service_url(name, external = false, domain_only = false)
    service_data = np_service_config(name)

    exit_with_error "Missing NP service config for #{name}" unless service_data

    if external
      url = get_service_external_domain(service_data[:name], service_data[:location])
    else
      url = get_service_domain(service_data[:name], service_data[:location])
    end

    return "" unless url

    domain_only ? url : 'https://' + url
  end
end

EnvBuilder.new.go
