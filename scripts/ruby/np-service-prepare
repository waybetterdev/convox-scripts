#!/usr/bin/env ruby
# frozen_string_literal: true

require File.expand_path(__dir__) + '/includes/op_base.rb'

class PrepareLocalService < OpBase

  def initialize; end

  def go
    parse_opts

    prepare_kraken
    prepare_app
  end

  HELP = <<-BAN
  A ssh connect script for old platform websites
  Ex:
    prepare-node-app -a wb-user-service
  BAN

  def parse_opts
    self.option_parser = OptionParser.new do |opts|
      opts.banner = HELP

      opts.separator ''
      opts.separator 'Specific options:'

      add_debug_option(opts)

      add_np_app_option(opts)

      add_help_option(opts)
    end
    option_parser.parse!(ARGV)

    exit_with_error('app parameter is required') if opts_np_app.nil?
  end

  def prepare_kraken
    return if Dir.exist?(path_kraken)

    checkout_app(name: 'kraken', path: path_wb_services)

    exec_bash_command "cd #{path_kraken} && nvm install --lts && npm install",
                      message: 'Installing kraken node modules', exit_on_fail: false
    exec_bash_command "cd #{path_kraken} && bundle config --global gem.fury.io $GEMFURY_SECRET && gem install bundler && bundle install",
                      message: 'Installing kraken ruby gems', exit_on_fail: false
  end

  def prepare_app
    app_path = np_service_path(opts_np_app)
    checkout_app(name: opts_np_app, path: File.expand_path('../', app_path)) unless Dir.exist?(app_path)

    exec_command "env-builder -w -a #{opts_np_app}"
    if np_service_is_node(opts_np_app)
      exec_command "cd #{app_path} && np-service-run -e 'cd #{app_path} && nvm install && nvm ls && npm install'"
    elsif np_service_is_ruby(opts_np_app)
      exec_command "cd #{app_path} && np-service-run -e 'cd #{app_path} && gem install bundler && bundle install && be rails db:migrate'"
    else
      throw "Could not detect whether '#{opts_np_app}' is a ruby or node app."
    end
  end

  def ruby_version; end
end

PrepareLocalService.new.go
