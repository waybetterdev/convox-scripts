#!/usr/bin/env ruby
# frozen_string_literal: true

public

require 'optparse'
require 'open3'

begin
  require 'highline'
  require 'colored'
  require 'terminfo'
rescue LoadError
  puts <<~XXX
    To run this utility:
      gem install 'highline'
      gem install 'colored'
      gem install 'ruby-terminfo'
  XXX
  exit(1)
end

class KRubocop
  attr_accessor :app, :rack, :command, :service_filter, :op, :any, :instance_id

  CONVOX_BIN = `which convox`.strip

  def initialize
    @rack = `convox switch`.strip
    @app = nil
    @command = 'bash'
    @service_filter = /.*/
    @any = false
  end

  def konnect_error(message)
    puts("#{op.banner}.\n\nError: #{message}")
    exit 1
  end

  def go
    parse_opts

    check_for_convox

    ids_to_names = filtered_id_to_name_map

    all_names_the_same = ids_to_names.values.uniq.size.eql?(1)

    self.instance_id = if all_names_the_same && any
                         ids_to_names.keys.sample
                       else
                         choose_service(ids_to_names)
                       end

    temp_file = 'temp-rubocop-output.txt'
    # Fire it up
    cmd = build_convox_command('bundle exec rubocop -a') + " > #{temp_file}"
    info "Running: #{cmd}"
    exec_command(cmd)

    info "Reading file #{temp_file}"
    pattern = %r{([\w^ ]+(/[\w^ ]+)+\.rb):\d+:\d+}
    all_matches = []
    File.foreach(temp_file) do |line|
      if matches = line.match(pattern)
        all_matches.push(matches[1])
      end
    end
    all_matches = all_matches.uniq
    File.delete(temp_file)

    zip_config_path = 'files_to_zip.txt'
    zip_config_file = File.open(zip_config_path, 'w')
    all_matches.each do |file|
      # TODO: why the hell is convox using winwows newlines?
      # convert newlines using "tr -d '\r'"
      cmd = build_convox_command("cat '#{file}'") + " | tr -d '\r' > '#{file}'"
      info "Copying #{file} from convox machine to local path"
      zip_config_file.puts(file) if exec_command(cmd)
    end
    zip_config_file.close

    zip_file = 'rubocop_chaged_files.zip'
    cmd = "zip #{zip_file} -@ < #{zip_config_path}"
    info 'Creating a zip with all modified files'
    return unless exec_command(cmd)

    exec_command("rm -fv #{zip_config_path}")
    exec_command("rm -fv #{zip_file}")
    info 'Success. '
  end

  def exec_command(cmd)
    `#{cmd}`
  end

  def build_convox_command(command)
    # Fire it up
    "#{CONVOX_BIN} exec --rack #{rack} --app #{app} #{instance_id} '#{command}'"
  end

  def parse_opts
    self.op = OptionParser.new do |opts|
      opts.banner = <<~BAN

        A wrapper around convox exec that runs rubocop with autofix option inside the container and downlaods the modified files.

        If you provide no command to run, it runs 'bash'.

        Ex:
              krubocop -r local/convox -a falkor-game-service
                # run the command on any instance that matches the filter

      BAN

      opts.separator ''
      opts.separator 'Specific options:'

      opts.on('-z', '--debug', 'Optional: load pry') do |_x|
        require 'pry'
      end

      opts.on('-c', '--rack=R', "Optional, the command, default: 'bash'") do |x|
        self.command = x
      end

      opts.on('-r', '--rack=R', 'Optional, the convox rack') do |x|
        self.rack = x
      end

      opts.on('-a', '--app=A', 'Optional, the convox app.') do |x|
        self.app = x
      end

      opts.on('-s', '--service=S', 'Required: which service (a regex)') do |x|
        self.service_filter = /#{x}/
      end

      opts.on('-n', '--any', 'Optional, connect to any matching instance.') do |x|
        self.any = x
      end
    end

    op.parse!(ARGV)

    if app.nil?
      info "--app not provided, using 'kraken'"
      self.app = 'kraken'
    end
  end

  def check_for_convox
    konnect_error "Command 'convox' was not found in your PATH" if CONVOX_BIN.to_s.empty?
  end

  def id_name_map
    cmd = "#{CONVOX_BIN} ps --rack #{rack} --app #{app}"
    info cmd
    stdout, stderr, status = Open3.capture3(cmd)
    konnect_error(stderr) if status.exitstatus.eql?(1)

    lines = stdout.lines[1..-1]

    # Create a map of instance id to instance name
    Hash[lines.map do |line|
      line.split(/\s{2,}/).first(2)
    end]
  end

  def filtered_id_to_name_map
    services_map = id_name_map
    services_map.delete_if { |k, v| "#{k}-#{v}" !~ service_filter }
    konnect_error "No services matched #{service_filter}" if services_map.empty?
    services_map
  end

  def choose_service(service_map)
    return service_map.keys.first if service_map.size.eql?(1)

    puts "\n"
    choice = nil
    cli.choose do |menu|
      menu.prompt = "\nWhich service?".yellow
      service_map.each do |id, name|
        menu.choice("#{name} #{id}") { choice = id }
      end
      menu.choice('quit') { exit 0 }
    end
    choice
  end

  def info(msg)
    warn msg.blue
  end

  def screen_rows
    TermInfo.screen_size.first
  end

  def screen_columns
    TermInfo.screen_size.last
  end

  def cli
    @_cli = HighLine.new
  end
end

KRubocop.new.go
