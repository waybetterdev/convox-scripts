#!/usr/bin/env ruby

public

require 'optparse'
require 'open3'

begin
  require 'highline'
  require 'colored'
  require 'terminfo'
rescue LoadError => x
  puts <<-XXX
To run this utility:
  gem install 'highline'
  gem install 'colored'
  gem install 'ruby-terminfo'
XXX
  exit(1)
end

require File.expand_path('../', __FILE__) + "/includes/op-base.rb"

class OpPhpLogs < OpBase

  attr_accessor :server, :option_parser, :debug


  def initialize
    load_settings
  end

  def go
    parse_opts
    port = @ssh_config[:port] ? @ssh_config[:port] : 22
    command = 'vim "/var/log/php-fpm/www-error.log"'
    run_ssh_command(@ssh_config[:user], @ssh_config[:hostname], @ssh_config[:key], command, port)
  end

  HELP = <<-BAN
  A ssh connect script for old platform websites
  Ex:
    opphplogs -s stepbet-dev
  BAN

  def parse_opts
    self.option_parser = OptionParser.new do |opts|

      opts.banner = HELP

      opts.separator ""
      opts.separator "Specific options:"

      self.add_debug_option(opts)

      opts.on("-s", "--server=S", "Required, the server to connect") do |x|
        self.server = x
      end

      add_help_option(opts)
    end
    self.option_parser.parse!(ARGV)

    if self.server.nil? 
      exit_with_error("server parameter is required")
    end

    @ssh_config = ssh_config(self.server)
    if @ssh_config.nil?
      exit_with_error("Server not found")
    end

  end

  def exec_command(cmd)
    puts "Running command: '#{cmd}'"  if self.debug

    cmd.gsub("'", "\\\\'")
    # %x[ #{cmd} ]
    exec(cmd)
  end


end

OpPhpLogs.new.go
