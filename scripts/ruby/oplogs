#!/usr/bin/env ruby
# frozen_string_literal: false

public

require File.expand_path(__dir__) + '/includes/op_base.rb'
class OpDeploy < OpBase
  attr_accessor :opts_op_app, :option_parser, :file, :debug, :open_files, :join_files

  def initialize
    load_op_severs_config
  end

  def go
    parse_opts

    download_log_file(opts_op_app, file)
  end

  def download_log_file(app, file)
    op_deploy_config = op_deploy_config(app)
    src_file = "#{op_deploy_config[:dst]}/system/logs/#{file}"

    dst_dir = "#{Dir.home}/Work/deploy/logs/#{app}"
    exit_with_error "Destination directory `#{dst_dir}` not found. Please create it." unless Dir.exist?(dst_dir)

    server_count = op_deploy_config[:hostnames].count
    downloaded_files = []
    op_deploy_config[:hostnames].each_with_index do |hostname, index|
      prefix = server_count > 1 ? "FT-#{index + 1}-" : ''
      dst_file = "#{dst_dir}/#{prefix}#{File.basename(file)}"
      copy_file_via_ssh(op_deploy_config[:user], hostname, op_deploy_config[:key], src_file, dst_file)
      downloaded_files.push(dst_file)
    end

    if join_files
      dst_file = "#{dst_dir}/#{File.basename(file)}"
      exec_command("rm -f #{dst_file}")
      downloaded_files.each_with_index do |downloaded_file, index|
        separator = <<~LOG
          \n\n
          ################################################################################################################################################################################
          ##                                                                             SERVER #{index + 1}                                                                                       ##
          ################################################################################################################################################################################
          \n\n
        LOG
        exec_command("echo '#{separator}' >> #{dst_file}")
        exec_command("cat '#{downloaded_file}' >> #{dst_file}")
      end
      downloaded_files = [dst_file]
    end

    exec_command('gedit ' + downloaded_files.join(' ')) if open_files
  end

  HELP = <<-BAN.freeze

  A deploy script for old platform websites
  Ex:
    opdeploy -a stepbet-dev
  BAN

  def parse_opts
    self.option_parser = OptionParser.new do |opts|
      opts.banner = HELP

      opts.separator ''
      opts.separator 'Specific options:'

      add_debug_option(opts)

      add_op_app_option(opts)

      opts.on('-f', '--file=F', 'Log file to download') do |x|
        self.file = x
      end

      opts.on('-o', '--open', 'Optional, open the downloaded files on exit') do |_x|
        self.open_files = true
      end

      opts.on('-j', '--join', 'Optional, join multiple files in one file') do |_x|
        self.join_files = true
      end

      add_help_option(opts)
    end
    option_parser.parse!(ARGV)

    exit_with_error('app parameter is required') if opts_op_app.nil?
    op_deploy_config = op_deploy_config(opts_op_app)
    exit_with_error('app not found') if op_deploy_config.nil?

    exit_with_error('file parameter is required') if file.nil?
  end

  def copy_file_via_ssh(user, host, key, src_file, dst_file)
    puts "Copying '#{src_file}' to '#{dst_file}' from '#{user}@#{host}'".green
    # scp command (faster)
    command = "scp -i '#{key}' #{user}@#{host}:'#{src_file}' '#{dst_file}'"
    # ssh command (slower)
    # command = "ssh -i #{key} #{user}@#{host} -t 'cat #{src_file}' > #{dst_file}"
    response = exec_command(command)
    print response.green
  end
end

OpDeploy.new.go
